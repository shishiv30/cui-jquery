@mixin hidescrollbar() {
    scrollbar-face-color: rgba(255, 255, 255, 0);
    scrollbar-shadow-color: rgba(255, 255, 255, 0);
    scrollbar-highlight-color: rgba(255, 255, 255, 0);
    scrollbar-3dlight-color: rgba(255, 255, 255, 0);
    scrollbar-darkshadow-color: rgba(255, 255, 255, 0);
    scrollbar-track-color: rgba(255, 255, 255, 0);
    scrollbar-arrow-color: rgba(255, 255, 255, 0);
}

@mixin responsive-visibility($parent) {
    #{$parent} {
        display: block !important;
    }

    table#{$parent} {
        display: table;
    }

    tr#{$parent} {
        display: table-row !important;
    }

    th#{$parent},
    td#{$parent} {
        display: table-cell !important;
    }
}

@mixin responsive-invisibility($parent) {
    #{$parent} {
        display: none !important;
    }
}

@mixin clearfix {
    @if $support-destop {
        *zoom: 1;
    }

    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after {
        clear: both;
        overflow: hidden;
    }
}

//Border radius

@mixin border-radius($radius) {
    border-radius: $radius;
}

@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin border-bottom-right-radius($radius) {
    border-bottom-right-radius: $radius;
}

@mixin border-right-radius($radius) {
    border-bottom-right-radius: $radius;
    border-top-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
    border-bottom-left-radius: $radius;
    border-top-left-radius: $radius;
}

@mixin singleline($width: false) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    @if $width {
        width: $width;
    }
}

@mixin text-icon($iconSize: 18px, $fontSize: $font-size-5) {
    .text, i {
        vertical-align: middle;
        line-height: 1;
    }

    .text {
        font-size: $fontSize;
    }

    i {
        padding: 0 3px;
        vertical-align: middle;
        font-size: $iconSize;
    }
}

@mixin arrow-down($size, $color) {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
}

@mixin arrow-up($size, $color) {
    width: 0;
    height: 0;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
}

@mixin only-mobile() {
    body {
        &.mobile {
            @content;
        }
    }
}

@mixin only-desktop() {
    body {
        &.desktop {
            @content;
        }
    }
}

// Framework grid generation
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
    }
    #{$list} {
        position: relative;
        min-height: 1px;
        padding-left: $grid-gutter-width / 2;
        padding-right: $grid-gutter-width / 2;
    }
}

@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
    @for $i from 1 + 1 through $grid-columns {
        $list: "#{$list}, .col-#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
    }
}

@mixin calc-grid-column($index, $class, $type) {
    @if $type == width and $index > 0 {
        .col-#{$class}-#{$index} {
            width: percentage($index / $grid-columns);
        }
    }
    @if $type == push and $index > 0 {
        .col-#{$class}-push-#{$index} {
            left: percentage($index / $grid-columns);
        }
    }
    @if $type == push and $index == 0 {
        .col-#{$class}-push-0 {
            left: auto;
        }
    }
    @if $type == pull and $index > 0 {
        .col-#{$class}-pull-#{$index} {
            right: percentage($index / $grid-columns);
        }
    }
    @if $type == pull and $index == 0 {
        .col-#{$class}-pull-0 {
            right: auto;
        }
    }
    @if $type == offset {
        .col-#{$class}-offset-#{$index} {
            margin-left: percentage($index / $grid-columns);
        }
    }
}

@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}

@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, pull);
    @include loop-grid-columns($grid-columns, $class, push);
    @include loop-grid-columns($grid-columns, $class, offset);
}

@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: $gutter / 2;
    padding-right: $gutter / 2;
    @include clearfix;
}

@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: $gutter / -2;
    margin-right: $gutter / -2;
    @include clearfix;
}

@mixin fonticon() {
    display: inline-block;
    font: normal normal normal 14px/1 fonticon;
    font-size: inherit;
    text-rendering: auto;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    &:before {
        text-align: center;
        font-style: normal;
    }
}
